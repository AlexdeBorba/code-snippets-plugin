{"generator":"Code Snippets v2.14.0","date_created":"2020-03-23 00:11","snippets":[{"name":"WordPress: Customiser remove all","tags":["wordpress","customiser"],"scope":"admin","code":"\/\/ Exit if accessed directly\nif ( __FILE__ == $_SERVER['SCRIPT_FILENAME'] ) { exit; }\n\n\nif (!class_exists('Customizer_Remove_All')) :\nclass Customizer_Remove_All {\n\n\t\/**\n\t * @var Customizer_Remove_All\n\t *\/\n\tprivate static $instance;\n\n\n\t\/**\n\t * Main Instance\n\t *\n\t * Allows only one instance of Customizer_Remove_All in memory.\n\t *\n\t * @static\n\t * @staticvar array $instance\n\t * @return Big mama, Customizer_Remove_All\n\t *\/\n\tpublic static function instance() {\n\t\tif ( ! isset( self::$instance ) && ! ( self::$instance instanceof Customizer_Remove_All ) ) {\n\n\t\t\t\/\/ Start your engines!\n\t\t\tself::$instance = new Customizer_Remove_All;\n\n\t\t\t\/\/ Load the structures to trigger initially\n\t\t\tadd_action( 'plugins_loaded', array( self::$instance, 'load_languages' ) );\n\t\t\tadd_action( 'init', array( self::$instance, 'init' ), 10 ); \/\/ was priority 5\n\t\t\tadd_action( 'admin_init', array( self::$instance, 'admin_init' ), 10 ); \/\/ was priority 5\n\n\t\t}\n\t\treturn self::$instance;\n\t}\n\n\t\/**\n\t * Run all plugin stuff on init.\n\t *\n\t * @return void\n\t *\/\n\tpublic function init() {\n\n\t\t\/\/ Remove customize capability\n\t\tadd_filter( 'map_meta_cap', array( self::$instance, 'filter_to_remove_customize_capability'), 10, 4 );\n\t}\n\n\t\/**\n\t * Run all of our plugin stuff on admin init.\n\t *\n\t * @return void\n\t *\/\n\tpublic function admin_init() {\n\n\t\t\/\/ Drop some customizer actions\n\t\tremove_action( 'plugins_loaded', '_wp_customize_include', 10);\n\t\tremove_action( 'admin_enqueue_scripts', '_wp_customize_loader_settings', 11);\n\n\t\t\/\/ Manually overrid Customizer behaviors\n\t\tadd_action( 'load-customize.php', array( self::$instance, 'override_load_customizer_action') );\n\t}\n\n\t\/**\n\t * Load our language files\n\t *\n\t * @access public\n\t * @return void\n\t *\/\n\tpublic function load_languages() {\n\t\t\/\/ Set textdomain string\n\t\t$textdomain = 'wp-crap';\n\n\t\t\/\/ The 'plugin_locale' filter is also used by default in load_plugin_textdomain()\n\t\t$locale = apply_filters( 'plugin_locale', get_locale(), $textdomain );\n\n\t\t\/\/ Set filter for WordPress languages directory\n\t\t$wp_languages_dir = apply_filters( 'crap_wp_languages_dir',\tWP_LANG_DIR . '\/wp-crap\/' . $textdomain . '-' . $locale . '.mo' );\n\n\t\t\/\/ Translations: First, look in WordPress' \"languages\" folder\n\t\tload_textdomain( $textdomain, $wp_languages_dir );\n\n\t\t\/\/ Translations: Next, look in plugin's \"languages\" folder (default)\n\t\t$plugin_dir = basename( dirname( __FILE__ ) );\n\t\t$languages_dir = apply_filters( 'crap_languages_dir', $plugin_dir . '\/languages' );\n\t\tload_plugin_textdomain( $textdomain, FALSE, $languages_dir );\n\t}\n\n\t\/**\n\t * Remove customize capability\n\t *\n\t * This needs to be in public so the admin bar link for 'customize' is hidden.\n\t *\/\n\tpublic function filter_to_remove_customize_capability( $caps = array(), $cap = '', $user_id = 0, $args = array() ) {\n\t\tif ($cap == 'customize') {\n\t\t\treturn array('nope'); \/\/ thanks @ScreenfeedFr, http:\/\/bit.ly\/1KbIdPg\n\t\t}\n\n\t\treturn $caps;\n\t}\n\n\t\/**\n\t * Manually overriding specific Customizer behaviors\n\t *\/\n\tpublic function override_load_customizer_action() {\n\t\t\/\/ If accessed directly\n\t\twp_die( __( 'The Customizer is currently disabled.', 'wp-crap' ) );\n\t}\n\n} \/\/ End Class\nendif;\n\n\/**\n* The main function. Use like a global variable, except no need to declare the global.\n*\n* @return object The one true Customizer_Remove_All Instance\n*\/\nfunction Customizer_Remove_All() {\n\treturn Customizer_Remove_All::instance();\n}\n\n\/\/ GO!\nCustomizer_Remove_All();","priority":"10"}]}